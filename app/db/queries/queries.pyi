"""Typings for queries generated by aiosql"""

from typing import Dict, Optional, Sequence, List

from asyncpg import Connection, Record

class TagsQueriesMixin:
    async def get_all_tags(self, conn: Connection) -> Record: ...

    async def create_new_tags(
        self, conn: Connection, tags: Sequence[Dict[str, str]]
    ) -> None: ...


class TeacherQueriesMixin:
    async def create_new_teacher(
        self,
        conn: Connection,
        *,
        name: str,
        phone: str,
        homeroom_class: id,
    ) -> Record: ...

    async def search_all_teacher(
        self,
        conn: Connection,
    ) -> Record: ...
    
    async def search_teacher_unassigned(
        self,
        conn: Connection,
    ) -> Record: ...
    
    async def get_teacher_by_name(
        self,
        conn: Connection,
        username:str
    ) -> Record: ...

    async def get_teacher_by_id(
        self,
        conn: Connection,
        teacher_id:id
    ) -> Record: ...

    async def delete_teacher_by_id(
        self,
        conn: Connection,
        teacher_id:id
    ) -> Record: ...

    async def check_phone_is_taken(
        self,
        conn: Connection,
        phone:str
    ) -> Record: ...

    async def teacher_update(
        self,
        conn: Connection,
        teacher_id:int,
        name:str,
        phone:str,
        address:str,
    ) -> Record: ...

    async def update_class_id(
        self,
        conn: Connection,
        teacher_id:int,
        class_id:int,
    ) -> Record: ...
  
class SchoolQueriesMixin:
    
    async def create_new_grade(
        self,
        conn: Connection,
        *,  
        grade_name: int,
    ) -> Record: ...
    async def get_grades(self, conn: Connection) -> Record: ...
    
    async def delete_grade_id(
        self, conn: Connection, *, grade_id:int
    ) -> None: ...

    async def get_grade_by_username(
        self, conn: Connection, *, grade_name: int
    ) -> Record: ...

    async def get_all_class(self, conn: Connection) -> Record: ...

    async def create_new_class(
        self,
        conn: Connection,
        class_name:str,
        grade_id:int
    ) -> Record: ...

    async def get_class_by_name(
        self, conn: Connection, *, class_name: str
    ) -> Record: ...

    async def update_teacher_is_null(
        self, conn: Connection, *, class_id: int
    ) -> Record: ...

    async def delete_class_id(
        self, conn: Connection, *, class_id: int
    ) -> Record: ...

class AccountQueriesMixin:
    async def get_account_by_email(self, conn: Connection, *, email: str) -> Record: ...
    async def get_account_by_username(
        self, conn: Connection, *, username: str
    ) -> Record: ...
    async def create_new_account(
        self,
        conn: Connection,
        *,
        username: str,
        email: str,
        salt: str,
        hashed_password: str,
        role : int,
        teacher_id: int,
        address: Optional[str]
    ) -> Record: ...


    async def update_user_by_username(
        self,
        conn: Connection,
        *,
        username: str,
        new_username: str,
        new_email: str,
        new_salt: str,
        new_password: str,
        new_bio: Optional[str],
        new_image: Optional[str]
    ) -> Record: ...



class UsersQueriesMixin:
    async def get_user_by_email(self, conn: Connection, *, email: str) -> Record: ...
    async def get_user_by_username(
        self, conn: Connection, *, username: str
    ) -> Record: ...
    async def create_new_user(
        self,
        conn: Connection,
        *,
        username: str,
        email: str,
        salt: str,
        hashed_password: str
    ) -> Record: ...
    async def update_user_by_username(
        self,
        conn: Connection,
        *,
        username: str,
        new_username: str,
        new_email: str,
        new_salt: str,
        new_password: str,
        new_bio: Optional[str],
        new_image: Optional[str]
    ) -> Record: ...

class ProfilesQueriesMixin:
    async def is_user_following_for_another(
        self, conn: Connection, *, follower_username: str, following_username: str
    ) -> Record: ...
    async def subscribe_user_to_another(
        self, conn: Connection, *, follower_username: str, following_username: str
    ) -> None: ...
    async def unsubscribe_user_from_another(
        self, conn: Connection, *, follower_username: str, following_username: str
    ) -> None: ...

class CommentsQueriesMixin:
    async def get_comments_for_article_by_slug(
        self, conn: Connection, *, slug: str
    ) -> Record: ...
    async def get_comment_by_id_and_slug(
        self, conn: Connection, *, comment_id: int, article_slug: str
    ) -> Record: ...
    async def create_new_comment(
        self, conn: Connection, *, body: str, article_slug: str, author_username: str
    ) -> Record: ...
    async def delete_comment_by_id(
        self, conn: Connection, *, comment_id: int, author_username: str
    ) -> None: ...

class ArticlesQueriesMixin:
    async def add_article_to_favorites(
        self, conn: Connection, *, username: str, slug: str
    ) -> None: ...
    async def remove_article_from_favorites(
        self, conn: Connection, *, username: str, slug: str
    ) -> None: ...
    async def is_article_in_favorites(
        self, conn: Connection, *, username: str, slug: str
    ) -> Record: ...
    async def get_favorites_count_for_article(
        self, conn: Connection, *, slug: str
    ) -> Record: ...
    async def get_tags_for_article_by_slug(
        self, conn: Connection, *, slug: str
    ) -> Record: ...
    async def get_article_by_slug(self, conn: Connection, *, slug: str) -> Record: ...
    async def create_new_article(
        self,
        conn: Connection,
        *,
        slug: str,
        title: str,
        description: str,
        body: str,
        author_username: str
    ) -> Record: ...
    async def add_tags_to_article(
        self, conn: Connection, tags_slugs: Sequence[Dict[str, str]]
    ) -> None: ...
    async def update_article(
        self,
        conn: Connection,
        *,
        slug: str,
        author_username: str,
        new_slug: str,
        new_title: str,
        new_body: str,
        new_description: str
    ) -> Record: ...
    async def delete_article(
        self, conn: Connection, *, slug: str, author_username: str
    ) -> None: ...
    async def get_articles_for_feed(
        self, conn: Connection, *, follower_username: str, limit: int, offset: int
    ) -> Record: ...

class StudentQueriesMixin:
    async def create_new_student(
        self,
        conn: Connection,
        *,
        name: str,
        phone: str,
        gender:int,
        address:str,
        date_of_birth:str,
        class_id: int,
    ) -> Record: ...

    async def student_update(
        self,
        conn: Connection,
        *,
        name: str,
        phone: str,
        gender:int,
        address:str,
        date_of_birth:str,
        class_id: int,
    ) -> Record: ...

    async def get_all_student(
        self,
        conn: Connection,
    ) -> Record: ...

    async def update_quantity(
        self,
        conn: Connection,
        *,
        class_id: int,
    ) -> Record: ...

    async def get_student_by_name(
        self,
        conn: Connection,
        *,
        name: str,
    ) -> Record: ...

    async def get_student_by_phone(
        self,
        conn: Connection,
        *,
        phone: str,
    ) -> Record: ...

    async def delete_student_by_id(
        self,
        conn: Connection,
        *,
        id: int,
    ) -> Record: ...

    # async def update_quantity_change_class(
    #     self,
    #     conn: Connection,
    #     *,
    #     old_id:int,
    #     new_id:int
    # ) -> Record: ...

class AttendQueriesMixin:
    async def get_attend_infors(
        self, conn: Connection, *, class_id: id
    ) -> Record: ...

    async def get_statistic(
        self, conn: Connection
    ) -> Record: ...
    

    async def search_statistic_detail(
        self, conn: Connection,
        class_id,
        from_date,
        to_date
    ) -> Record: ...

    async def search_attend_student_detail(
        self, conn: Connection,
        student_id,
        from_date,
        to_date
    ) -> Record: ...

    async def get_statistic_search(self, conn: Connection,from_date,to_date)-> Record: ...


class Queries(
    TagsQueriesMixin,
    UsersQueriesMixin,
    ProfilesQueriesMixin,
    CommentsQueriesMixin,
    ArticlesQueriesMixin,
    TeacherQueriesMixin,
    SchoolQueriesMixin,
    StudentQueriesMixin,
    AttendQueriesMixin
): ...

queries: Queries
